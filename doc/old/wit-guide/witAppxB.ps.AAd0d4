%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%DocumentNeedsFonts: (atend)
%%DocumentSuppliedFonts: (atend)
%%Creator: Frame 7.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 7.0, for use with Adobe Unix Frame 7.0 products
%
% This ps_prolog file is Copyright (c) 1986-2002 Adobe Systems, Incoporated.
% All rights reserved.  This ps_prolog file may be freely copied and 
% distributed in conjunction with documents created using Adobe FrameMaker
% as long as this copyright notice is preserved.
/FMDocSave save def
%
% FrameMaker users specify the proper paper size for each print job in the
% "Print" dialog's "Printer Paper Size" "Width" and "Height~ fields.  If the
% printer that the PS file is sent to does not support the requested paper
% size, or if there is no paper tray of the proper size currently installed, 
% then the job will not be printed.  The following flag, if set to true, will
% cause the job to print on the default paper in such cases.
/FMAllowPaperSizeMismatch            false def
%
% Adobe FrameMaker normally prints colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to true, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Adobe FrameMaker can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Adobe FrameMaker will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Adobe FrameMaker has two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% The following is a set of predefined optimal frequencies and angles for various
% common dpi settings. This is taken from "Advances in Color Separation Using
% PostScript Software Technology," from Adobe Systems (3/13/89 P.N. LPS 0043)
% and corrolated with information which is in various PPD (4.0) files.
%
% The "dpiranges" figure is the minimum dots per inch device resolution which
% can support this setting. The "low" and "high" values are controlled by the
% setting of the FMUseHighFrequencyScreens flag above. The "TDot" flags control
% the use of the "Yellow Triple Dot" feature whereby the frequency id divided by
% three, but the dot function is "trippled" giving a block of 3x3 dots per cell.
%
% PatFreq is a compromise pattern frequency for ps Level 2 printers which is close
% to the ideal WYSIWYG pattern frequency of 9 repetitions/inch but does not beat
% (too badly) against the screen frequencies of any separations for that DPI.
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (7.0) def 
/fMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	fMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	2 copy exch = = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto show
	72 220 moveto show
	FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Adobe Frame product version does not match ps_prolog!  Check installation;)
		(also check ~/fminit and ./fminit for old versions) FMFAILURE
		} if
	} def 
/fmConcatProcs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin [
	/ALDsave
	/FMdicttop
	/FMoptop
	/FMpointsize
	/FMsetsize
	/FMsaveobject
	/b
	/bitmapsave
	/blut
	/bpside
	/bs
	/bstring
	/bwidth
	/c
	/cf
	/cs
	/cynu
	/depth
	/edown
	/fh
	/fillvals
	/fw
	/fx
	/fy
	/g
	/gfile
	/gindex
	/grnt
	/gryt
	/gstring
	/height
	/hh
	/i
	/im
	/indx
	/is
	/k
	/kk
	/landscape
	/lb
	/len
	/llx
	/lly
	/m
	/magu
	/manualfeed
	/n
	/offbits
	/onbits
	/organgle
	/orgbangle
	/orgbfreq
	/orgbproc
	/orgbxfer
	/orgfreq
	/orggangle
	/orggfreq
	/orggproc
	/orggxfer
	/orghalftone
	/orgmatrix
	/orgproc
	/orgrangle
	/orgrfreq
	/orgrproc
	/orgrxfer
	/orgxfer
	/pagesave
	/paperheight
	/papersizedict
	/paperwidth
	/pos
	/pwid
	/r
	/rad
	/redt
	/sl
	/str
	/tran
	/u
	/urx
	/ury
	/val
	/width
	/width
	/ws
	/ww
	/x
	/x1
	/x2
	/xindex
	/xpoint
	/xscale
	/xx
	/y
	/y1
	/y2
	/yelu
	/yindex
	/ypoint
	/yscale
	/yy
	/tintGray
] { 0 def } forall
/FmBD {bind def} bind def
/FmPD4U true def 
/IsDistiller5050 
{ 
  mark systemdict 
  dup currentdistillerparams /CoreDistVersion get dup 5050 ge
  {cleartomark true} 
  {5000 lt 
    {cleartomark false} 
    { 
      dup dup /product known exch /buildtime known and not
      {cleartomark false} 
      {dup dup /product get (Distiller) eq                      
	{/buildtime get 985000000 gt 
	  {cleartomark true}
	  {cleartomark false} ifelse
	}
	{dup dup /product get (Mac Distiller) eq                  
	  {/buildtime get 985000000 gt 
	    {cleartomark true}
	    {cleartomark false} ifelse
	  }
	  {dup dup /product (Acrobat Distiller Server) eq       
	    {cleartomark true } 
	    { 
	      1183615869 internaldict /makeoperator known 
	      {cleartomark true}
	      {cleartomark false} ifelse 
	    } ifelse
	  } ifelse
	} ifelse
      } ifelse
    } ifelse
  } ifelse
} bind def
systemdict /pdfmark known systemdict /currentdistillerparams known and {
	/fMAcrobat true def
	
	/FmPD /pdfmark load def
	
	
	/FmPT /show load def
	
	
	
	currentdistillerparams /CoreDistVersion get 2000 ge 
	{
	
		
		/FmPD2 /pdfmark load def
		
		IsDistiller5050
		{
		  /FmPD4 /pdfmark load def
		}
		{
		  /FmPD4
		  { FmPD4U 
	 	    {(%%[Acrobat Distiller 5.05 and higher is required to generate Tagged PDF]%%) = 
	  	     (%%[Tagged PDF is not generated.]%%) = flush
		    } if
		    /FmPD4U false def
		    cleartomark
		  } FmBD
		} ifelse
		
		
		
		
	  /fmCG true def 
	  /FmND
	  { mark exch /Dest exch 5 3 roll /View [ /XYZ 5 -2 roll FmDC null ] /DEST FmPD 
	  }FmBD
	  /FmPA 
	  { fmCG
	    { pop pop pop }
	    { FmND } ifelse
	  } FmBD
	} 
	{
		
		/FmPD4 /cleartomark load def
		/FmPD2 /cleartomark load def
		/FmPA {pop pop pop}FmBD
		/FmND {pop pop pop}FmBD
	} ifelse
} {
	
	/fMAcrobat false def
	/FmPD /cleartomark load def
	/FmPD4 /cleartomark load def
	/FmPD2 /cleartomark load def
	/FmPT /pop load def
	/FmPA {pop pop pop}FmBD
	/FmND {pop pop pop}FmBD
} ifelse
/FmDC {
	transform fMDefaultMatrix defaultmatrix itransform round cvi exch round cvi exch
}FmBD
/FmBx {
	dup 3 index lt {3 1 roll exch} if 
	1 index 4 index lt {4 -1 roll 3 1 roll exch 4 1 roll} if
}FmBD
/FmBz {3 -1 roll sub 3 1 roll exch sub exch 0 0 4 1 roll 4 1 roll}FmBD
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/fMNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 1] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		RealSetrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
fMLevel1 { 
	
	
	
	/patScreenDict 7 dict dup begin
		<0f1e3c78f0e1c387> [ 45  { pop } {exch pop} 		.5   2 sqrt] FmBD
		<0f87c3e1f0783c1e> [ 135 { pop } {exch pop}			.5   2 sqrt] FmBD
		<cccccccccccccccc> [ 0   { pop } dup				.5   2	   ] FmBD
		<ffff0000ffff0000> [ 90  { pop } dup				.5   2	   ] FmBD
		<8142241818244281> [ 45  { 2 copy lt {exch} if pop}	dup .75  2 sqrt] FmBD
		<03060c183060c081> [ 45  { pop } {exch pop}			.875 2 sqrt] FmBD
		<8040201008040201> [ 135 { pop } {exch pop}			.875 2 sqrt] FmBD
	end def
} { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} ifelse
/tintCMYK {
	1 tintGray sub FrameCurColors 0 4 getinterval aload pop 	
	4 index mul 5 1 roll										
	3 index mul 5 1 roll										
	2 index mul 5 1 roll										
	mul 4 1 roll												
}bind def
/tintRGB {
	1 tintGray sub FrameCurColors 4 3 getinterval aload pop 	
	1 exch sub 3 index mul 1 exch sub 4 1 roll					
	1 exch sub 2 index mul 1 exch sub 4 1 roll					
	1 exch sub mul 1 exch sub 3 1 roll							
}bind def
/combineColor {
	/tintGray 1 1 FrameCurGray sub FrameCurColors 7 get mul sub def
    FrameSepIs FMnone eq
	{
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			tintCMYK FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				tintGray RealSetgray
			} {
				fMAcrobat not FMPColor graymode and and {
					tintCMYK
					RealSetcmykcolor
				} {
					tintRGB
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ tintGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{tintGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop tintGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop tintGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop tintGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode fMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not fMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/fMDefaultMatrix matrix def
/fMatrix2 matrix def
/dpi    72 0 fMDefaultMatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 fMDefaultMatrix defaultmatrix dtransform exch atan def
	sangle fMatrix2 rotate 
	fMDefaultMatrix defaultmatrix fMatrix2 concatmatrix 
	dup 0 get /sflipx exch def
	    3 get /sflipy exch def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	fMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	fMLevel1 {
		FMPColor {
			orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
		}
		{
			orgxfer cvx settransfer
		} ifelse
		orgfreq organgle orgproc cvx setscreen
	} {
		orghalftone sethalftone
	}ifelse
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	
/FMDOCUMENT { 
	array /FMfonts exch def 
	dup 1 gt {/#copies exch def} {pop} ifelse
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /fMNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	fMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{papersizefailure} if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{2 dict
		 dup /PageSize [paperwidth paperheight] put
		 manualfeed {dup /ManualFeed manualfeed put} if
		 {setpagedevice} stopped {papersizefailure} if
		}
	ifelse 
	
	fMLevel1 not {
		/orghalftone currenthalftone def
	}if 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			fMNegative {
				1 1 4 { 
					pop { 1 exch sub } fmConcatProcs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		fMNegative {
			{ 1 exch sub } fmConcatProcs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/FMENDDOCUMENT {
	FMDocSave restore	
} def
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	/FmPD4U FmPD4U
	pagesave restore
	def
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature: *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	
	mark
	statusdict begin 
		/setpageparams where {
			pop
			paperwidth paperheight 0 1 
			{setpageparams} stopped 
		} { 
			true 
		} ifelse
		
		{
			
			/setpagedevice where {
				pop 
				1 dict dup begin
					/PageSize [ paperwidth paperheight ] def
				end 
				{setpagedevice} stopped
			} {
				true	
			} ifelse
		} {
			false		
		} ifelse 
	end
	{cleartomark true}{cleartomark false}ifelse
} bind def
/papersizefailure {
	FMAllowPaperSizeMismatch not
		{
(The requested paper size is not available in any currently-installed tray)
(Edit the PS file to "FMAllowPaperSizeMismatch true" to use default tray)
		 FMFAILURE } if
	} def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYK } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/BEGINBITMAPCMYK { 
		BITMAPCMYKGRAY } def
	/BEGINBITMAPCMYKc { 
		BITMAPCMYKGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		8 1 roll
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
		8 -1 roll
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
fMLevel1 {
	/fmGetFlip {
		fMatrix2 exch get mul 0 lt { -1 } { 1 } ifelse
	} FmBD
} if
/setPatternMode {
	fMLevel1 {
		2 index patScreenDict exch known {
			pop pop
			patScreenDict exch get aload pop 
			freq 								
			mul									
			5 2 roll							
			fMatrix2 currentmatrix 1 get 0 ne {
				3 -1 roll 90 add 3 1 roll 		
				sflipx 1 fmGetFlip sflipy 2 fmGetFlip neg mul
			} {  								
				sflipx 0 fmGetFlip sflipy 3 fmGetFlip mul 
			} ifelse
			0 lt {exch pop} {pop} ifelse 		
			fMNegative { 
				{neg} fmConcatProcs 			
			} if
			bind
			
			
			
			systemdict /setscreen get exec		
			/FrameCurGray exch def
		} {
			/bwidth  exch def
			/bpside  exch def
			/bstring exch def
			/onbits 0 def  /offbits 0 def
			freq sangle landscape {90 add} if 
				{/ypoint exch def
				 /xpoint exch def
				 /xindex xpoint 1 add 2 div bpside mul cvi def
				 /yindex ypoint 1 add 2 div bpside mul cvi def
				 bstring yindex bwidth mul xindex 8 idiv add get
				 1 7 xindex 8 mod sub bitshift and 0 ne fMNegative {not} if
				 {/onbits  onbits  1 add def 1}
				 {/offbits offbits 1 add def 0}
				 ifelse
				}
				setscreen
			offbits offbits onbits add dup 0 ne {div} {pop pop .5} ifelse fMNegative {1.0 exch sub} if
			/FrameCurGray exch def
		} ifelse
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		fMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode fMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode fMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
/F { 
	FMfonts exch get
	[FMsetsize 0 0 FMpointsize 0 0] makefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	/FMsetsize FMpointsize def
	F 
	} bind def
/QQ { 
	/FMsetsize exch def
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	2 copy 0.0 0.0 1.0 5 3 roll arc 
	round cvi 360 mod exch round cvi 360 mod eq {closepath} if 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/rip4 { 
	   
	  
	  kis cis copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  cis mis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  mis yis copy pop 
	  dup dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  yis kis copy pop 
	  3 mul is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
/wbytes { 
      dup dup
      8 gt { pop 8 idiv mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	cvtProc                
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/cvtProc exch def
	/depth exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def 
	cvtProc              
	/is width depth wbytes string def
	/cf currentfile def 
	width height depth [width 0 0 height neg 0 height] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
fMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/kk cynu magu min yelu min def
		/u kk currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 kk currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch fmConcatProcs settransfer
} bind def
/BITMAPCOLOR { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/bitmapsave save def
	fMLevel1 {	
		colorsetup
		/is width depth wbytes string def
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is width depth wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/depth 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	fMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		width height depth [width 0 0 height neg 0 height] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width width def
			/Height height def
			/ImageMatrix [width 0 0 height neg 0 height] def
			/DataSource {ip} bind def
			/BitsPerComponent depth def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/depth 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip pop ris} {gis} {bis} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCMYKc { 
	/depth 32 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	width height 8 [width 0 0 height neg 0 height] 
	{width rip4 pop cis} {mis} {yis} {kis} true 4 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYK { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /mis width string def
        /yis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop } 
        { cf mis readhexstring pop } 
        { cf yis readhexstring pop } 
        { cf kis readhexstring pop } 
        true 4 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/depth 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 width getinterval def	
	/gis im width width getinterval def	
	/bis im width 2 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop ris gis bis width gray} image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAYc { 
	/depth 32 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/height exch def /width exch def
	/lb width depth wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/cis im 0 width getinterval def	
	/mis im width width getinterval def	
	/yis im width 2 mul width getinterval def 
	/kis im width 3 mul width getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        {width rip pop cis mis yis kis width cgray} image
        bitmapsave restore 
        grestore
        } bind def
/cgray { 
        /ww exch def
        /k exch def
        /y exch def
        /m exch def
        /c exch def
        0 1 ww 1 sub { /i exch def c i get m i get y i get k i get CMYKtoRGB
				.144 mul 3 1 roll .587 mul 3 1 roll .299 mul add add
				c i 3 -1 roll floor cvi put } for
        c
 		} bind def
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /gis width string def
        /bis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop width gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPCMYKGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/height exch def /width exch def
        /bitmapsave save def 
        /is width string def
        /yis width string def
        /mis width string def
        /kis width string def
        /cf currentfile def 
        width height 8 [width 0 0 height neg 0 height] 
        { cf is readhexstring pop 
          cf mis readhexstring pop 
          cf yis readhexstring pop 
          cf kis readhexstring pop width cgray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(7.0) FMVERSION
1 1 0 0 612 792 0 1 16 FMDOCUMENT
%%IncludeFont: Helvetica-Bold
0 0 /Helvetica-Bold FMFONTDEFINE
%%IncludeFont: Symbol
1 1 /Symbol FMFONTDEFINE
%%IncludeFont: Times-Roman
2 0 /Times-Roman FMFONTDEFINE
%%IncludeFont: Times-Bold
3 0 /Times-Bold FMFONTDEFINE
%%IncludeFont: Courier
4 0 /Courier FMFONTDEFINE
%%IncludeFont: Courier-Bold
5 0 /Courier-Bold FMFONTDEFINE
%%IncludeFont: Helvetica
6 0 /Helvetica FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "429" 1
%%BeginPaperSize: Letter
%%EndPaperSize
%%ViewingOrientation: 1 0 0 1
612 792 0 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 1 K
J
-45 -45 657 837 C
0 0 0 1 0 0 0 1 K
0 12 Q
0 X
(Licensed Materials - Pr) 211.31 739 T
(oper) 341.78 739 T
(ty of IBM) 368.03 739 T
1 10 Q
(\323) 234 31.63 T
0 F
1 ( Cop) 241.9 31.63 S
1 (yright IBM Corp. 2000) 267.97 31.63 S
(429) 541.32 31.63 T
0 14 Q
1.22 (APPENDIX B) 72 677 S
2 24 Q
-0.17 (File F) 207 677 S
-0.17 (ormats) 262.33 677 S
3 14 Q
(Input Data File) 207 618.67 T
2 11 Q
(This section de\336nes the format of the Input Data \336le, i.e., the \336le read by the) 207 596.67 T
(API function) 207 583.67 T
4 10 Q
(witReadData) 266.88 583.67 T
2 11 Q
(and the main input \336le for the stand-alone) 338.88 583.67 T
(e) 207 570.67 T
(x) 211.72 570.67 T
(ecutable.) 217.05 570.67 T
(The Input Data \336le is in \322free format\323: it consists of a series of \322tok) 207 545.67 T
(ens\323) 503.83 545.67 T
(separated by \322white space\323 \050blanks and line breaks\051. The \336le format can be) 207 532.67 T
(thought) 207 519.67 T
(of) 243.11 519.67 T
(as) 254.76 519.67 T
(a) 266.42 519.67 T
(\322language\323) 273.8 519.67 T
(and) 325.77 519.67 T
(the) 344.14 519.67 T
(formal) 360.08 519.67 T
(syntax) 391.9 519.67 T
(for) 423.11 519.67 T
(this) 438.43 519.67 T
(language) 456.82 519.67 T
(will) 499.02 519.67 T
(be) 518.63 519.67 T
(gi) 531.51 519.67 T
(v) 539.79 519.67 T
(en) 545.12 519.67 T
(belo) 207 506.67 T
(w) 225.67 506.67 T
(. But we be) 232.89 506.67 T
(gin with an informal description, including e) 282.83 506.67 T
(xplanations of) 479.13 506.67 T
(what the language is telling WIT to do.) 207 493.67 T
(A v) 207 468.67 T
(alid input data \336le consists of zero or more \322commands\323. The v) 222.92 468.67 T
(alid) 501.88 468.67 T
(commands are:) 207 455.67 T
5 12 Q
(\245) 207 436.67 T
2 11 Q
(\322add\323 command) 220.74 436.67 T
5 12 Q
(\245) 207 420.67 T
2 11 Q
(\322set\323 command) 220.74 420.67 T
5 12 Q
(\245) 207 404.67 T
2 11 Q
(\322read\323 command) 220.74 404.67 T
(Each command ends with a semicolon.) 207 379.67 T
(An \322add\323 command tells WIT to create a ne) 207 354.67 T
(w WIT data object \050of some type\051) 400.39 354.67 T
(and) 207 341.67 T
(to) 225.4 341.67 T
(assign) 236.47 341.67 T
(v) 266.49 341.67 T
(alues) 271.71 341.67 T
(to) 296.84 341.67 T
(zero) 307.91 341.67 T
(or) 329.36 341.67 T
(more) 341.04 341.67 T
(of) 366.16 341.67 T
(the) 377.84 341.67 T
(attrib) 393.8 341.67 T
(utes) 416.8 341.67 T
(associated) 437.03 341.67 T
(with) 484.76 341.67 T
(that) 506.83 341.67 T
(object.) 525.85 341.67 T
(An) 207 328.67 T
(y) 220.28 328.67 T
(attrib) 228.18 328.67 T
(ute) 251.18 328.67 T
(whose) 267.03 328.67 T
(v) 297.55 328.67 T
(alue) 302.77 328.67 T
(is) 323.5 328.67 T
(not) 333.25 328.67 T
(assigned) 349.71 328.67 T
(will) 390 328.67 T
(retain) 409.52 328.67 T
(its) 436.98 328.67 T
(def) 449.78 328.67 T
(ault) 463.72 328.67 T
(v) 482.62 328.67 T
(alue) 487.85 328.67 T
(\050de\336ned) 508.58 328.67 T
(in) 547.03 328.67 T
(Chapter 2\051. An e) 207 315.67 T
(xample of an \322add\323 command is as follo) 280.15 315.67 T
(ws:) 457.37 315.67 T
4 10 Q
(add bomEntry "operation17" "material24") 220.75 297.33 T
(earliestPeriod 2) 238.75 285.33 T
(latestPeriod) 238.75 273.33 T
( 7;) 322.75 273.33 T
2 11 Q
(A \322set\323 command identi\336es an already e) 207 248.67 T
(xisting object and tells WIT to assign) 384.63 248.67 T
(v) 207 235.67 T
(alues) 212.23 235.67 T
(to) 237.29 235.67 T
(zero) 248.31 235.67 T
(or) 269.7 235.67 T
(more) 281.33 235.67 T
(of) 306.39 235.67 T
(the) 318.02 235.67 T
(attrib) 333.92 235.67 T
(utes) 356.92 235.67 T
(associated) 377.11 235.67 T
(with) 424.78 235.67 T
(that) 446.8 235.67 T
(object.) 465.76 235.67 T
(An) 497.86 235.67 T
(y) 511.13 235.67 T
(attrib) 519.09 235.67 T
(ute) 542.1 235.67 T
(whose v) 207 222.67 T
(alue is not assigned will retain its current v) 243.08 222.67 T
(alue. An e) 431.62 222.67 T
(xample of a \322set\323) 476.36 222.67 T
(command is as follo) 207 209.67 T
(ws:) 295.64 209.67 T
4 10 Q
(set demand "part43" "customer5") 220.75 191.33 T
(buildAheadLimit 4) 238.75 179.33 T
(shipLateLimit) 238.75 167.33 T
(1;) 336.75 167.33 T
2 11 Q
(A \322read\323 command tells WIT to temporarily interrupt reading the current input) 207 142.67 T
(data) 207 129.67 T
(\336le,) 227.71 129.67 T
(read) 246.9 129.67 T
(a) 268.21 129.67 T
(dif) 275.47 129.67 T
(ferent) 287.42 129.67 T
(input) 315.45 129.67 T
(data) 340.45 129.67 T
(\336le,) 361.16 129.67 T
(and) 380.35 129.67 T
(then) 398.61 129.67 T
(resume) 419.93 129.67 T
(reading) 454.08 129.67 T
(the) 489.45 129.67 T
(current) 505.28 129.67 T
(\336le.) 538.81 129.67 T
(An e) 207 116.67 T
(xample of a \322read\323 command is as follo) 227.91 116.67 T
(ws:) 402.68 116.67 T
4 10 Q
(read "supply.data";) 220.75 98.33 T
FMENDPAGE
%%EndPage: "429" 1
%%Page: "430" 2
%%ViewingOrientation: 1 0 0 1
612 792 0 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
-45 -45 657 837 C
0 0 0 1 0 0 0 1 K
0 10 Q
0 X
(430) 45 31.63 T
1 (Appendix B: File Formats) 180 31.63 S
2 11 Q
(The language also allo) 189 655.99 T
(ws for comments. A comment be) 288.01 655.99 T
(gins with double slash) 433.88 655.99 T
(\050//\051, ends at the end of the line and may be inserted an) 189 642.99 T
(ywhere in the \336le, e.g.:) 424.98 642.99 T
4 10 Q
(set demand "part43" "customer5") 202.75 624.66 T
(buildAheadLimit 4) 220.75 612.66 T
(// This is a comment.) 340.75 612.66 T
(shipLateLimit) 220.75 600.66 T
(1;) 318.75 600.66 T
3 12 Q
(Data T) 189 569.33 T
(ypes) 223.78 569.33 T
2 11 Q
(An attrib) 189 543.99 T
(ute v) 228.19 543.99 T
(alue may be an) 249.61 543.99 T
(y of the follo) 315.73 543.99 T
(wing types:) 372.59 543.99 T
0 F
(1.) 189 524.99 T
2 F
(INTEGER) 202.74 524.99 T
0 F
(2.) 189 508.99 T
2 F
(FLO) 202.74 508.99 T
(A) 223.14 508.99 T
(T) 229.86 508.99 T
0 F
(3.) 189 492.99 T
2 F
(<boolean>) 202.74 492.99 T
0 F
(4.) 189 476.99 T
2 F
(STRING) 202.74 476.99 T
0 F
(5.) 189 460.99 T
2 F
(<v) 202.74 460.99 T
(ector_format>) 214.28 460.99 T
0 F
(6.) 189 444.99 T
2 F
(<bound_set_format>) 202.74 444.99 T
(The format for INTEGER and FLO) 189 419.99 T
(A) 345.33 419.99 T
(T is just the usual format used in C and) 352.05 419.99 T
(other languages.) 189 406.99 T
(A <boolean> is either true or f) 189 381.99 T
(alse.) 322.88 381.99 T
(A STRING is an) 189 356.99 T
(y sequence of characters enclosed in double quote marks \050"\051,) 262.47 356.99 T
(with the follo) 189 343.99 T
(wing e) 248 343.99 T
(xceptions:) 277.47 343.99 T
(") 224.74 324.99 T
(is represented as:) 202.74 308.99 T
(\134") 224.74 292.99 T
(and) 202.74 276.99 T
(\134) 224.74 260.99 T
(is represented as:) 202.74 244.99 T
(\134\134) 224.74 228.99 T
(Thus the follo) 202.74 196.99 T
(wing string:) 264.19 196.99 T
4 10 Q
(abc\134def"ghi) 232.75 168.66 T
2 11 Q
(w) 202.74 136.99 T
(ould be represented as:) 210.58 136.99 T
4 10 Q
("abc\134\134def\134"ghi") 228.75 108.66 T
FMENDPAGE
%%EndPage: "430" 2
%%Page: "431" 3
%%ViewingOrientation: 1 0 0 1
612 792 0 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
-45 -45 657 837 C
0 0 0 1 0 0 0 1 K
0 10 Q
0 X
1 (Input Data File) 234 31.63 S
(431) 541.32 31.63 T
2 11 Q
(A \134 follo) 207 679.99 T
(wed by an) 244 679.99 T
(ything other than " or \134 is an error) 289.05 679.99 T
(.) 435.91 679.99 T
(F) 207 654.99 T
(or con) 212.95 654.99 T
(v) 240.31 654.99 T
(enience, three dif) 245.64 654.99 T
(ferent formats are allo) 321.42 654.99 T
(wed for v) 418.58 654.99 T
(ectors:) 460.57 654.99 T
5 12 Q
(\245) 207 635.99 T
2 11 Q
(dense) 220.74 635.99 T
(Each element of the v) 220.74 619.99 T
(ector must be speci\336ed. F) 316.5 619.99 T
(or e) 429.07 619.99 T
(xample, if nPeriods = 4,) 445.7 619.99 T
(the follo) 220.74 606.99 T
(wing is a dense v) 257.44 606.99 T
(ector format:) 333.04 606.99 T
4 10 Q
(dense \0509. 8. 7. 6.\051) 220.75 582.66 T
5 12 Q
(\245) 207 554.99 T
2 11 Q
(single) 220.74 554.99 T
(One) 220.74 538.99 T
(v) 241.71 538.99 T
(alue) 246.93 538.99 T
(is) 267.89 538.99 T
(speci\336ed) 277.86 538.99 T
(and) 319.6 538.99 T
(e) 338.12 538.99 T
(v) 342.73 538.99 T
(ery) 348.07 538.99 T
(element) 364.75 538.99 T
(of) 402.21 538.99 T
(the) 414.01 538.99 T
(v) 430.08 538.99 T
(ector) 435.42 538.99 T
(is) 460.04 538.99 T
(assigned) 470.02 538.99 T
(this) 510.53 538.99 T
(v) 529.06 538.99 T
(alue.) 534.29 538.99 T
(F) 220.74 525.99 T
(or e) 226.7 525.99 T
(xample:) 243.33 525.99 T
4 10 Q
(single \0502.3\051) 220.75 501.66 T
2 11 Q
(is equi) 220.74 469.99 T
(v) 249.5 469.99 T
(alent to:) 254.72 469.99 T
4 10 Q
(dense \0502.3 2.3 2.3 2.3\051) 220.75 445.66 T
5 12 Q
(\245) 207 417.99 T
2 11 Q
(sparse) 220.74 417.99 T
(The v) 220.74 401.99 T
(alues of some elements are speci\336ed and the rest are assigned the) 245.82 401.99 T
(def) 220.74 388.99 T
(ault v) 234.68 388.99 T
(alue for the attrib) 259.16 388.99 T
(ute. F) 335 388.99 T
(or each element to be speci\336ed, list the) 359.89 388.99 T
(element\325) 220.74 375.99 T
(s) 258.63 375.99 T
(period,) 265.62 375.99 T
(follo) 299.2 375.99 T
(wed) 319.7 375.99 T
(by) 340.74 375.99 T
(a) 354.46 375.99 T
(colon,) 362.06 375.99 T
(follo) 391.97 375.99 T
(wed) 412.48 375.99 T
(by) 433.52 375.99 T
(the) 447.24 375.99 T
(v) 463.4 375.99 T
(alue) 468.62 375.99 T
(of) 489.67 375.99 T
(the) 501.55 375.99 T
(element.) 517.71 375.99 T
(F) 220.74 362.99 T
(or e) 226.7 362.99 T
(xample, if the def) 243.33 362.99 T
(ault is 0., then) 320.81 362.99 T
4 10 Q
(sparse \0503:4.2 1:7.8\051) 220.75 338.66 T
2 11 Q
(is equi) 220.74 310.99 T
(v) 249.5 310.99 T
(alent to:) 254.72 310.99 T
4 10 Q
(dense \0500. 7.8 0. 4.2\051) 220.75 286.66 T
2 11 Q
(A bound set attrib) 207 261.99 T
(ute is speci\336ed by specifying zero or more of the bounds that) 285.91 261.99 T
(de\336ne) 207 248.99 T
(it:) 236.28 248.99 T
(hardLB,) 247.86 248.99 T
(softLB,) 286.61 248.99 T
(and) 322.32 248.99 T
(hardUB.) 340.6 248.99 T
(Each) 380.58 248.99 T
(bound) 404.97 248.99 T
(is) 434.87 248.99 T
(speci\336ed) 444.6 248.99 T
(as) 486.11 248.99 T
(a) 497.67 248.99 T
(v) 504.95 248.99 T
(ector) 510.29 248.99 T
(.) 531.67 248.99 T
(An) 536.82 248.99 T
(y) 550.1 248.99 T
(bound not speci\336ed in a bound set retains either its def) 207 235.99 T
(ault v) 447.03 235.99 T
(alue \050in an \322add\323) 471.51 235.99 T
(command\051 or its current v) 207 222.99 T
(alue \050in a \322set\323 command\051. A bound set format is) 320.98 222.99 T
(terminated with the \322endBounds\323 k) 207 209.99 T
(e) 362.7 209.99 T
(yw) 367.42 209.99 T
(ord. F) 380.76 209.99 T
(or e) 406.87 209.99 T
(xample:) 423.5 209.99 T
4 10 Q
(set part "material56") 220.75 191.66 T
(stockBounds) 238.75 179.66 T
(softLB sparse \0502:10.\051) 256.75 167.66 T
(hardUB single \050100.\051) 256.75 155.66 T
(endBounds;) 256.75 143.66 T
2 11 Q
(In this case, the hardLB for the stockBounds of part \323material56\323 is left at its) 207 118.99 T
(current v) 207 105.99 T
(alue.) 246.13 105.99 T
FMENDPAGE
%%EndPage: "431" 3
%%Page: "432" 4
%%ViewingOrientation: 1 0 0 1
612 792 0 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
-45 -45 657 837 C
0 0 0 1 0 0 0 1 K
0 10 Q
0 X
(432) 45 31.63 T
1 (Appendix B: File Formats) 180 31.63 S
3 12 Q
(F) 189 679.33 T
(ormal Syntax) 196.03 679.33 T
2 11 Q
(F) 189 653.99 T
(ollo) 194.95 653.99 T
(wing is a list of BNF \050Backus-Nauer F) 211.79 653.99 T
(orm\051 rules which formally describe) 381.81 653.99 T
(the syntax of the WIT input data \336le language. The terms enclosed in <> are) 189 640.99 T
(de\336ned by this syntax. The terms in non-proportional font \050e.g.,) 189 627.99 T
4 F
( add) 469.17 627.99 T
2 F
( or) 495.57 627.99 T
4 F
(part) 189 614.99 T
2 F
(\051) 215.4 614.99 T
(are) 221.53 614.99 T
(literal) 237.42 614.99 T
(and) 265.55 614.99 T
(must) 283.9 614.99 T
(be) 307.76 614.99 T
(written) 320.61 614.99 T
(e) 354.24 614.99 T
(xactly) 358.95 614.99 T
(as) 388.3 614.99 T
(sho) 399.93 614.99 T
(wn.) 414.94 614.99 T
(The) 433.59 614.99 T
(terms) 453.16 614.99 T
(in) 480.07 614.99 T
(upper) 491.09 614.99 T
(case) 518.6 614.99 T
(\050e.g., STRING, INTEGER\051 are left unde\336ned in the syntax and are e) 189 601.99 T
(xplained) 490.96 601.99 T
(else) 189 588.99 T
(where.) 205.83 588.99 T
(<input_data> ::) 189 563.99 T
(<command_list>) 213.74 544.99 T
(| <release_speci\336cation> <command_list>) 213.74 528.99 T
(<release_speci\336cation> ::) 189 491.99 T
4 F
(release) 213.74 472.99 T
2 F
( <release_num>;) 259.95 472.99 T
(<release_num> ::) 189 435.99 T
(STRING) 208.24 416.99 T
(<command_list> ::) 189 379.99 T
(<empty>) 208.24 360.99 T
(| <command_list> <command>) 202.74 344.99 T
(<command> ::) 189 307.99 T
(<add_command>) 219.24 288.99 T
(    | <set_command>) 202.74 272.99 T
(| <read_command>) 213.74 256.99 T
(<add_command> ::) 189 219.99 T
4 F
(add) 213.74 200.99 T
2 F
( <addable_object_type> <ar) 233.54 200.99 T
(gument_list> <attrib) 357.04 200.99 T
(ute_list>;) 447.15 200.99 T
(<set_command> ::) 189 163.99 T
4 F
(set) 213.74 144.99 T
2 F
( <settable_object_type> <ar) 233.54 144.99 T
(gument_list> <attrib) 356.44 144.99 T
(ute_list>;) 446.55 144.99 T
(<addable_object_type> ::) 189 107.99 T
(<basic_object_type>) 227.49 88.99 T
FMENDPAGE
%%EndPage: "432" 4
%%Page: "433" 5
%%ViewingOrientation: 1 0 0 1
612 792 0 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
-45 -45 657 837 C
0 0 0 1 0 0 0 1 K
0 10 Q
0 X
1 (Input Data File) 234 31.63 S
(433) 541.32 31.63 T
4 11 Q
(| partWithOperation) 231.74 679.99 T
2 F
(<settable_object_type> ::) 207 642.99 T
(<basic_object_type>) 242.74 623.99 T
4 F
(| problem) 231.74 607.99 T
2 F
(<basic_object_type> ::) 207 570.99 T
4 F
(part) 234.49 551.99 T
(| demand) 220.74 535.99 T
(| operation) 220.74 519.99 T
(| bomEntry) 220.74 503.99 T
(| subEntry) 220.74 487.99 T
(| bopEntry) 220.74 471.99 T
2 F
(<ar) 207 434.99 T
(gument_list> ::) 221.55 434.99 T
(<empty>) 226.24 415.99 T
(| <ar) 220.74 399.99 T
(gument_list> <ar) 240.25 399.99 T
(gument>) 315.71 399.99 T
(<ar) 207 362.99 T
(gument> ::) 221.55 362.99 T
(STRING) 226.24 343.99 T
(| INTEGER) 220.74 327.99 T
(| <part_cate) 220.74 311.99 T
(gory>) 272.05 311.99 T
(<part_cate) 207 274.99 T
(gory> ::) 253.35 274.99 T
4 F
(material) 226.24 255.99 T
2 F
(|) 220.74 239.99 T
4 F
(capacity) 225.7 239.99 T
2 F
(<attrib) 207 202.99 T
(ute_list> ::) 236.21 202.99 T
(<empty>) 226.24 183.99 T
(| <attrib) 220.74 167.99 T
(ute_list> <attrib) 254.9 167.99 T
(ute>) 325.45 167.99 T
(<attrib) 207 130.99 T
(ute> ::) 236.21 130.99 T
(A) 220.74 111.99 T
(TTRIB) 227.47 111.99 T
(UTE_N) 259.14 111.99 T
(AME <attrib) 293.58 111.99 T
(ute_v) 349.97 111.99 T
(alue>) 374.14 111.99 T
FMENDPAGE
%%EndPage: "433" 5
%%Page: "434" 6
%%ViewingOrientation: 1 0 0 1
612 792 0 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
-45 -45 657 837 C
0 0 0 1 0 0 0 1 K
0 10 Q
0 X
(434) 45 31.63 T
1 (Appendix B: File Formats) 180 31.63 S
2 11 Q
(<attrib) 189 679.99 T
(ute_v) 218.21 679.99 T
(alue> ::) 242.37 679.99 T
(<simple_v) 208.24 660.99 T
(alue>) 254.51 660.99 T
(| <v) 202.74 644.99 T
(ector_format>) 219.23 644.99 T
(| <bound_set_format>) 202.74 628.99 T
(<simple_v) 189 587.99 T
(alue> ::) 235.27 587.99 T
(INTEGER) 208.24 568.99 T
(| FLO) 202.74 552.99 T
(A) 228.09 552.99 T
(T) 234.81 552.99 T
(| STRING) 202.74 536.99 T
(| <boolean>) 202.74 520.99 T
(<boolean> ::) 189 483.99 T
4 F
(true) 208.24 464.99 T
2 F
(|) 202.74 448.99 T
4 F
(false) 207.7 448.99 T
2 F
(<v) 189 411.99 T
(ector_format> ::) 200.54 411.99 T
4 F
(dense) 216.49 392.99 T
2 F
( \050<v) 249.49 392.99 T
(alue_list>\051) 267.34 392.99 T
4 F
(| single) 202.74 376.99 T
2 F
( \050<v) 255.54 376.99 T
(ector_v) 273.5 376.99 T
(alue>\051) 306.21 376.99 T
4 F
(| sparse) 202.74 360.99 T
2 F
( \050<sparse_list>\051) 255.54 360.99 T
(<v) 189 323.99 T
(alue_list> ::) 200.43 323.99 T
(<v) 208.24 304.99 T
(ector_v) 219.78 304.99 T
(alue>) 252.5 304.99 T
(| <v) 202.74 288.99 T
(alue_list> <v) 219.12 288.99 T
(ector_v) 276.9 288.99 T
(alue>) 309.61 288.99 T
(<v) 189 263.99 T
(ector_v) 200.54 263.99 T
(alue> ::) 233.25 263.99 T
(INTEGER) 208.24 244.99 T
(| FLO) 202.74 228.99 T
(A) 228.09 228.99 T
(T) 234.81 228.99 T
(<sparse_list> ::) 189 191.99 T
(<empty>) 208.24 172.99 T
(| <sparse_list> <period_v) 202.74 156.99 T
(alue>) 314.33 156.99 T
(<period_v) 189 119.99 T
(alue> ::) 234.03 119.99 T
(<period> : <v) 213.74 100.99 T
(ector_v) 274.36 100.99 T
(alue>) 307.07 100.99 T
FMENDPAGE
%%EndPage: "434" 6
%%Page: "435" 7
%%ViewingOrientation: 1 0 0 1
612 792 0 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
-45 -45 657 837 C
0 0 0 1 0 0 0 1 K
0 10 Q
0 X
1 (Input Data File) 234 31.63 S
(435) 541.32 31.63 T
2 11 Q
(<period> ::) 207 679.99 T
(INTEGER) 231.74 660.99 T
(<bound_set_format>::) 207 623.99 T
4 F
(endBounds) 226.24 604.99 T
2 F
(| <bound_item> <bound_set_format>) 220.74 588.99 T
(<bound_item> ::) 207 551.99 T
(<bound_type> <v) 231.74 532.99 T
(ector_format>) 310.38 532.99 T
(<bound_type> ::) 207 495.99 T
4 F
(hardLB) 231.74 476.99 T
(| softLB) 220.74 460.99 T
(| hardUB) 220.74 444.99 T
2 F
(<read_command> ::) 207 407.99 T
4 F
(read) 231.74 388.99 T
2 F
( <\336le_name>;) 258.14 388.99 T
(<\336le_name> ::) 207 351.99 T
(STRING) 231.74 332.99 T
3 12 Q
(Additional Language Rules) 207 289.33 T
2 11 Q
(In addition to the abo) 207 263.99 T
(v) 300.94 263.99 T
(e syntax, the follo) 306.27 263.99 T
(wing rules apply:) 384.83 263.99 T
0 F
(1.) 207 244.99 T
2 F
(Note that the \336le may optionally be) 220.74 244.99 T
(gin with a release speci\336cation. The) 376.41 244.99 T
(release speci\336cation doesn\325) 220.74 231.99 T
(t actually mean an) 341.51 231.99 T
(ything; it is included in the) 421.69 231.99 T
(present \336le format simply for compatibility with pre) 220.74 218.99 T
(vious v) 449.93 218.99 T
(ersions of the) 481.85 218.99 T
(format.) 220.74 205.99 T
0 F
(2.) 207 189.99 T
2 F
(An A) 220.74 189.99 T
(TTRIB) 243.66 189.99 T
(UTE_N) 275.33 189.99 T
(AME can be the name of an) 309.77 189.99 T
(y input attrib) 433.01 189.99 T
(ute listed in) 489.63 189.99 T
(chapter 2, e) 220.74 176.99 T
(xcept for the follo) 271.59 176.99 T
(wing:) 350.43 176.99 T
5 12 Q
(\245) 225 160.99 T
2 11 Q
(partName) 234 160.99 T
5 12 Q
(\245) 225 144.99 T
2 11 Q
(demandName) 234 144.99 T
5 12 Q
(\245) 225 128.99 T
2 11 Q
(operationName) 234 128.99 T
5 12 Q
(\245) 225 112.99 T
2 11 Q
(appData) 234 112.99 T
5 12 Q
(\245) 225 96.99 T
2 11 Q
(fssShipV) 234 96.99 T
(ol) 272.92 96.99 T
5 12 Q
(\245) 225 80.99 T
2 11 Q
(optInitMethod) 234 80.99 T
FMENDPAGE
%%EndPage: "435" 7
%%Page: "436" 8
%%ViewingOrientation: 1 0 0 1
612 792 0 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
-45 -45 657 837 C
0 0 0 1 0 0 0 1 K
0 10 Q
0 X
(436) 45 31.63 T
1 (Appendix B: File Formats) 180 31.63 S
5 12 Q
(\245) 207 679.99 T
2 11 Q
(solv) 216 679.99 T
(erLogFileName) 234.17 679.99 T
5 12 Q
(\245) 207 663.99 T
2 11 Q
(An) 216 663.99 T
(y attrib) 229.28 663.99 T
(ute listed as an \322immutable input attrib) 260.53 663.99 T
(ute\323 in Chapter 2) 431.41 663.99 T
0 F
(3.) 189 647.99 T
2 F
(The A) 202.74 647.99 T
(TTRIB) 229.32 647.99 T
(UTE_N) 260.99 647.99 T
(AME must match the object type being set or added,) 295.43 647.99 T
(e.g., supplyV) 202.74 634.99 T
(ol is only allo) 259.99 634.99 T
(wed for a part.) 319.92 634.99 T
0 F
(4.) 189 618.99 T
2 F
(In an \322add partW) 202.74 618.99 T
(ithOperation\323 command, only part attrib) 278.36 618.99 T
(utes may be) 455.64 618.99 T
(speci\336ed. \050The operation and bopEntry attrib) 202.74 605.99 T
(utes for a partW) 400.49 605.99 T
(ithOperation) 471.22 605.99 T
(can be set using the \322set operation\323 and \322set bopEntry\323 commands.\051) 202.74 592.99 T
0 F
(5.) 189 576.99 T
2 F
(The type and v) 202.74 576.99 T
(alue of an <attrib) 268.15 576.99 T
(ute_v) 343.48 576.99 T
(alue> must be appropriate to the) 367.65 576.99 T
(attrib) 202.74 563.99 T
(ute, as de\336ned in Chapter 2. E.g., e) 225.75 563.99 T
(x) 379.56 563.99 T
(ecPenalty must be a \337oat) 384.89 563.99 T
1 F
(\263) 497.63 563.99 T
2 F
( 0.0.) 503.67 563.99 T
0 F
(6.) 189 547.99 T
2 F
(The) 202.74 547.99 T
(number) 222.13 547.99 T
(of) 258.02 547.99 T
(<v) 269.46 547.99 T
(ector_v) 281 547.99 T
(alue>s) 313.72 547.99 T
(speci\336ed) 344.81 547.99 T
(in) 386.2 547.99 T
(a) 397.04 547.99 T
4 F
(dense) 404.2 547.99 T
2 F
(<v) 439.48 547.99 T
(ector_format>) 451.02 547.99 T
(must) 516.32 547.99 T
(be equal to nPeriods.) 202.74 534.99 T
0 F
(7.) 189 518.99 T
2 F
(A <period>, t, must satisfy 0) 202.74 518.99 T
1 F
(\243) 331.87 518.99 T
2 F
( t < nPeriods.) 337.91 518.99 T
0 F
(8.) 189 502.99 T
2 F
(The same <period> cannot be speci\336ed more than once within the same) 202.74 502.99 T
4 F
(sparse) 202.74 489.99 T
2 F
( <v) 242.35 489.99 T
(ector_format>.) 256.63 489.99 T
0 F
(9.) 189 473.99 T
2 F
(A) 202.74 473.99 T
(<bound_type>) 213.36 473.99 T
(\050i.e.,) 280.38 473.99 T
(hardLB,) 302.91 473.99 T
(softLB,) 341.94 473.99 T
(hardUB\051) 377.92 473.99 T
(must) 419.08 473.99 T
(not) 443.15 473.99 T
(be) 459.89 473.99 T
(speci\336ed) 472.94 473.99 T
(more) 514.72 473.99 T
(than once within the same <bound_set_format>.) 202.74 460.99 T
0 F
(10.) 189 444.99 T
2 F
(The <ar) 204.29 444.99 T
(gument_list> in an \322add\323 or \322set\323 command is required to be the) 238.7 444.99 T
(speci\336c list of ar) 202.74 431.99 T
(guments appropriate for the object type being added or set.) 275.57 431.99 T
(The speci\336c ar) 202.74 418.99 T
(guments required for each \322add\323 and \322set\323 command is gi) 267.3 418.99 T
(v) 521.49 418.99 T
(en) 526.83 418.99 T
(in the table belo) 202.74 405.99 T
(w) 273.05 405.99 T
(. In all cases, the ar) 280.27 405.99 T
(guments are attrib) 364.69 405.99 T
(utes of the) 443.9 405.99 T
(corresponding) 202.74 392.99 T
(object) 268.36 392.99 T
(type.) 297.92 392.99 T
(The) 322.3 392.99 T
(types) 342.08 392.99 T
(of) 367.98 392.99 T
(these) 379.83 392.99 T
(ar) 405.11 392.99 T
(guments/attrib) 413.46 392.99 T
(utes) 476.8 392.99 T
(are) 497.2 392.99 T
(gi) 513.32 392.99 T
(v) 521.6 392.99 T
(en) 526.93 392.99 T
(in) 202.74 379.99 T
(Chapter) 213.87 379.99 T
(2.) 251.26 379.99 T
(Note) 262.08 379.99 T
(that,) 286.03 379.99 T
(in) 307.85 379.99 T
(some) 318.97 379.99 T
(cases,) 344.76 379.99 T
(the) 373.28 379.99 T
(ar) 389.29 379.99 T
(guments) 397.64 379.99 T
(for) 437.49 379.99 T
(an) 452.88 379.99 T
(\322add\323) 465.83 379.99 T
(command) 494.05 379.99 T
(are) 202.74 366.99 T
(some) 218.63 366.99 T
(what) 241.58 366.99 T
(dif) 265.42 366.99 T
(ferent) 277.36 366.99 T
(than) 305.47 366.99 T
(the) 326.87 366.99 T
(ar) 342.77 366.99 T
(guments) 351.12 366.99 T
(for) 390.85 366.99 T
(a) 406.13 366.99 T
(\322set\323) 413.47 366.99 T
(command) 437.92 366.99 T
(for) 483.76 366.99 T
(the) 499.04 366.99 T
(same) 514.94 366.99 T
(object type \050e.g. consumedP) 202.74 353.99 T
(artName vs. bomEntryInde) 326.92 353.99 T
(x for a bomEntry\051.) 446.21 353.99 T
(This simply re\337ects the f) 202.74 340.99 T
(act that, in some cases, dif) 312.02 340.99 T
(ferent information is) 427.53 340.99 T
(needed to create an object than is needed to look up an e) 202.74 327.99 T
(xisting object.) 450.63 327.99 T
0 F
(11.) 189 311.99 T
2 F
(The STRING gi) 204.29 311.99 T
(v) 274.9 311.99 T
(en as a <\336le_name> will be interpreted as the name of an) 280.23 311.99 T
(input data \336le.) 202.74 298.99 T
0 F
(12.) 189 282.99 T
2 F
(The) 204.29 282.99 T
(read) 224.12 282.99 T
(commands) 245.78 282.99 T
(can) 296.17 282.99 T
(be) 314.17 282.99 T
(nested,) 327.28 282.99 T
(e.g.,) 360.86 282.99 T
(\336le) 382.22 282.99 T
(A) 399.01 282.99 T
(contains) 409.67 282.99 T
(a) 449.07 282.99 T
(read) 456.68 282.99 T
(command) 478.33 282.99 T
(for) 524.45 282.99 T
(\336le) 202.74 269.99 T
(B,) 219.55 269.99 T
(which) 232.38 269.99 T
(contains) 262.02 269.99 T
(a) 301.43 269.99 T
(read) 309.06 269.99 T
(command) 330.74 269.99 T
(for) 376.87 269.99 T
(\336le) 392.44 269.99 T
(C,) 409.25 269.99 T
(etc.) 422.08 269.99 T
(There) 440.41 269.99 T
(is) 468.81 269.99 T
(a) 478.89 269.99 T
(limit) 486.52 269.99 T
(on) 510.06 269.99 T
(the) 523.81 269.99 T
(number of nested reads that are allo) 202.74 256.99 T
(wed. Currently the limit is 30.) 359.48 256.99 T
0 F
(13.) 189 240.99 T
2 F
(The maximum number of characters allo) 204.29 240.99 T
(wed in a line of input is 1000. If a) 383.34 240.99 T
(line in an input data \336le e) 202.74 227.99 T
(xceeds this limit, an error message is issued, and) 314.41 227.99 T
(the program is terminated. This error message, which originates in the input) 202.74 214.99 T
(reading softw) 202.74 201.99 T
(are \050\322LEX\323\051 used by WIT) 262.82 201.99 T
(, is) 376.84 201.99 T
3 F
(not) 392.43 201.99 T
2 F
( controlled by the \322) 407.71 201.99 T
(API) 491.76 201.99 T
(Message Attrib) 202.74 188.99 T
(utes\323. \050See page) 270.04 188.99 T
(154.\051) 343.96 188.99 T
0 F
(T) 54 171.33 T
(ABLE  9) 59.73 171.33 T
0 12 Q
(Ar) 189 171.33 T
(guments f) 202.15 171.33 T
(or the \322ad) 259.25 171.33 T
(d\323 and \322set\323 Commands) 315.8 171.33 T
0 10 Q
(Object T) 121 145.66 T
(ype) 160.41 145.66 T
(Ar) 234 145.66 T
(guments f) 244.96 145.66 T
(or \322ad) 292.54 145.66 T
(d\323) 321.89 145.66 T
(Ar) 390 145.66 T
(guments f) 400.96 145.66 T
(or \322set\323) 448.54 145.66 T
2 11 Q
(part) 121 128.99 T
(partName) 234 128.99 T
(partCate) 234 111.99 T
(gory) 271.1 111.99 T
(partName) 390 128.99 T
(demand) 121 94.99 T
(demandedP) 234 94.99 T
(artName) 285.16 94.99 T
(demandName) 234 77.99 T
(demandedP) 390 94.99 T
(artName) 441.16 94.99 T
(demandName) 390 77.99 T
115 159.13 115 72.33 2 L
V
0.5 H
0 Z
N
228 159.53 228 72.33 2 L
V
N
384 159.53 384 72.33 2 L
V
N
540 159.13 540 72.33 2 L
V
N
114.75 159.33 540.25 159.33 2 L
V
0.4 H
N
114.75 140.33 540.25 140.33 2 L
V
N
114.75 106.33 540.25 106.33 2 L
V
0.5 H
N
FMENDPAGE
%%EndPage: "436" 8
%%Page: "437" 9
%%ViewingOrientation: 1 0 0 1
612 792 0 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
-45 -45 657 837 C
0 0 0 1 0 0 0 1 K
0 10 Q
0 X
1 (Input Data File) 234 31.63 S
(437) 541.32 31.63 T
0 11 Q
(14.) 207 451.99 T
2 F
(The object identi\336ed in a \322set\323 command must already e) 222.29 451.99 T
(xist.) 469.89 451.99 T
0 F
(15.) 207 435.99 T
2 F
(If an ar) 222.29 435.99 T
(gument in a command identi\336es another object \050e.g.,) 253.85 435.99 T
(consumedP) 220.74 422.99 T
(artName\051, that object must already e) 271.3 422.99 T
(xist.) 431.21 422.99 T
0 F
(16.) 207 406.99 T
2 F
(The v) 222.29 406.99 T
(arious constraints on objects and attrib) 247.37 406.99 T
(utes de\336ned in Chapter 2 all) 416.71 406.99 T
(apply) 220.74 393.99 T
(, e.g., a part\325) 244.47 393.99 T
(s partName must be unique.) 299.15 393.99 T
(NO) 207 368.99 T
(TE: Some of WIT\325) 222.44 368.99 T
(s error messages for the input data \336le refer to \322entities\323.) 305.24 368.99 T
(\322Entity\323 is a synon) 207 355.99 T
(ym for \322object type\323.) 290.25 355.99 T
3 12 Q
(Sample Input Data Files) 207 324.33 T
2 11 Q
(W) 207 306.99 T
(e conclude this section with an e) 216.5 306.99 T
(xample pair of input data \336les which,) 359.32 306.99 T
(together) 207 293.99 T
(, de\336ne a small WIT problem. The e) 242.61 293.99 T
(xample w) 402.22 293.99 T
(as designed to illustrate) 445.18 293.99 T
(the v) 207 280.99 T
(arious language constructs that the \336le format permits and is not a) 228.42 280.99 T
(particularly) 207 267.99 T
(meaningful) 260.39 267.99 T
(WIT) 313.17 267.99 T
(problem.) 336.61 267.99 T
(The) 378.7 267.99 T
(problem) 398.48 267.99 T
(has) 437.82 267.99 T
(the) 455.16 267.99 T
(follo) 471.27 267.99 T
(wing) 491.78 267.99 T
(structure:) 516.45 267.99 T
(operation) 139 636.99 T
(operationName) 252 636.99 T
(operationName) 408 636.99 T
(bomEntry) 139 619.99 T
(consumingOperationName) 252 619.99 T
(consumedP) 252 602.99 T
(artName) 302.56 602.99 T
(consumingOperationName) 408 619.99 T
(bomEntryInde) 408 602.99 T
(x) 471.38 602.99 T
(subEntry) 139 585.99 T
(consumingOperationName) 252 585.99 T
(bomEntryInde) 252 568.99 T
(x) 315.38 568.99 T
(consumedP) 252 551.99 T
(artName) 302.56 551.99 T
(consumingOperationName) 408 585.99 T
(bomEntryInde) 408 568.99 T
(x) 471.38 568.99 T
(subsBomEntryInde) 408 551.99 T
(x) 492.78 551.99 T
(bopEntry) 139 534.99 T
(producingOperationName) 252 534.99 T
(producedP) 252 517.99 T
(artName) 298.88 517.99 T
(producingOperationName) 408 534.99 T
(bopEntryInde) 408 517.99 T
(x) 468.32 517.99 T
(problem) 139 500.99 T
(\322add\323 not allo) 252 500.99 T
(wed) 313.43 500.99 T
(no ar) 408 500.99 T
(guments) 430.1 500.99 T
(partW) 139 483.99 T
(ithOperation) 166.05 483.99 T
(partName) 252 483.99 T
(\322set\323 not allo) 408 483.99 T
(wed) 465.77 483.99 T
0 F
(T) 72 679.33 T
(ABLE  9) 77.73 679.33 T
0 12 Q
(Ar) 207 679.33 T
(guments f) 220.15 679.33 T
(or the \322ad) 277.25 679.33 T
(d\323 and \322set\323 Commands) 333.8 679.33 T
0 10 Q
(Object T) 139 653.66 T
(ype) 178.41 653.66 T
(Ar) 252 653.66 T
(guments f) 262.96 653.66 T
(or \322ad) 310.54 653.66 T
(d\323) 339.89 653.66 T
(Ar) 408 653.66 T
(guments f) 418.96 653.66 T
(or \322set\323) 466.54 653.66 T
133 667.13 133 476.83 2 L
V
0.5 H
0 Z
N
246 667.53 246 479.83 2 L
V
N
402 667.53 402 479.83 2 L
V
N
558 667.13 558 476.83 2 L
V
N
132.75 667.33 558.25 667.33 2 L
V
0.4 H
N
132.75 648.33 558.25 648.33 2 L
V
N
132.75 631.33 558.25 631.33 2 L
V
0.5 H
N
132.75 597.33 558.25 597.33 2 L
V
N
132.75 546.33 558.25 546.33 2 L
V
N
132.75 512.33 558.25 512.33 2 L
V
N
132.75 495.33 558.25 495.33 2 L
V
N
133.25 479.58 557.75 479.58 2 L
V
N
133.25 477.08 557.75 477.08 2 L
V
N
FMENDPAGE
%%EndPage: "437" 9
%%Page: "438" 10
%%ViewingOrientation: 1 0 0 1
612 792 0 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
-45 -45 657 837 C
0 0 0 1 0 0 0 1 K
0 10 Q
0 X
(438) 45 31.63 T
1 (Appendix B: File Formats) 180 31.63 S
0 11 Q
(FIGURE  22) 54 679.99 T
6 F
(The Prob) 189 679.99 T
(lem De\336) 234.02 679.99 T
(ned b) 274.36 679.99 T
(y the Example WIT Input Data Files) 301.66 679.99 T
2 F
(Here are the e) 189 379.99 T
(xample \336les:) 250.21 379.99 T
(File \322e) 189 354.99 T
(xample.main.data\323:) 218.47 354.99 T
4 10 Q
(//------------------------------------------------------) 202.75 311.66 T
(// Example of a WIT Input Data File) 202.75 299.66 T
(// Main File) 202.75 287.66 T
(//------------------------------------------------------) 202.75 275.66 T
(//------------------------------------------------------) 202.75 251.66 T
(// Setting problem attributes.) 202.75 239.66 T
(//------------------------------------------------------) 202.75 227.66 T
(set problem) 202.75 203.66 T
(   nPeriods 4) 202.75 191.66 T
(   execEmptyBom true) 202.75 179.66 T
( title "quote mark: \134" back slash: \134\134";) 214.75 167.66 T
(     //) 202.75 155.66 T
(     // title: -->quote mark: " back slash: \134<--) 202.75 143.66 T
(//------------------------------------------------------) 202.75 119.66 T
(// Creating Objects.) 202.75 107.66 T
(//------------------------------------------------------) 202.75 95.66 T
54 72 540 687.33 C
54 424.33 540 676.33 C
0 0 0 1 0 0 0 1 K
295.45 628.81 295.45 598.81 2 L
0.5 H
0 Z
0 X
N
276.02 648.23 295.12 667.33 314.21 648.23 295.12 629.14 4 Y
2 Z
N
90 450 13.5 13.5 295.46 584.33 A
281.88 503.05 308.88 529.95 R
N
295.63 569.37 295.63 529.37 2 L
N
90 450 13.5 13.5 294.71 448.2 A
294.88 502.62 294.88 462.62 2 L
N
234.12 462.5 216.12 435.5 252.12 435.5 3 Y
N
295.63 502.5 234.38 462.5 2 L
N
346.75 501.92 373.75 528.83 R
N
361.25 528.75 294.38 570.62 2 L
N
361 501.5 361 461.5 2 L
N
90 450 13.5 13.5 360.83 447.08 A
J
361.88 460 358.31 461.16 2 L
N
[7.543 6.538] 7.543 I
358.31 461.16 298.57 480.71 2 L
N
J
298.57 480.71 295 481.87 2 L
N
J
2 18 Q
(A) 290.05 581.47 T
(D) 354.42 509.6 T
(A) 289.3 510.35 T
(C) 227.93 439.22 T
(B) 289.05 442.47 T
(E) 354.55 441.35 T
(F) 289.3 642.85 T
54 72 540 687.33 C
-45 -45 657 837 C
FMENDPAGE
%%EndPage: "438" 10
%%Page: "439" 11
%%ViewingOrientation: 1 0 0 1
612 792 0 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
-45 -45 657 837 C
0 0 0 1 0 0 0 1 K
0 10 Q
0 X
1 (Input Data File) 234 31.63 S
(439) 541.32 31.63 T
4 F
(// Creates part A, operation A,) 256.75 680.66 T
(// and the BOP entry connecting them.) 256.75 668.66 T
(//) 256.75 656.66 T
(add partWithOperation "A") 220.75 644.66 T
(stockCost single \0505.0\051) 238.75 632.66 T
(// attributes of part A) 388.75 632.66 T
(   scrapCost single \05050.0\051;) 220.75 620.66 T
(add part "B" material) 220.75 596.66 T
(stockCost single \0501.0\051) 238.75 584.66 T
(   scrapCost single \05010.0\051;) 220.75 572.66 T
(add part "C" capacity) 220.75 548.66 T
(supplyVol single \05030.0\051;) 238.75 536.66 T
(add part "E" material) 220.75 512.66 T
(stockCost single \0501.0\051) 238.75 500.66 T
(   scrapCost single \05010.0\051;) 220.75 488.66 T
(add demand "A" "F";) 220.75 452.66 T
(add operation "D";) 220.75 416.66 T
(add bomEntry "A" "C";) 220.75 380.66 T
(add bomEntry "A" "B";) 220.75 356.66 T
(add bomEntry "D" "E";) 220.75 332.66 T
(add subEntry "A" 1 "E";) 220.75 296.66 T
(//) 256.75 284.66 T
(// Substitution of part E in place of part B) 256.75 272.66 T
(// in the BOM entry representing the consumption) 256.75 260.66 T
(// of part B by operation A.) 256.75 248.66 T
(// This BOM entry has bomEntryIndex = 1.) 256.75 236.66 T
(add bopEntry "D" "A";) 220.75 200.66 T
(//------------------------------------------------------) 220.75 176.66 T
(// Reading supply data from another file) 220.75 164.66 T
(//------------------------------------------------------) 220.75 152.66 T
(read "example.supply.data";) 220.75 128.66 T
(//------------------------------------------------------) 220.75 104.66 T
(// Setting object attributes.) 220.75 92.66 T
(//------------------------------------------------------) 220.75 80.66 T
FMENDPAGE
%%EndPage: "439" 11
%%Page: "440" 12
%%ViewingOrientation: 1 0 0 1
612 792 0 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
-45 -45 657 837 C
0 0 0 1 0 0 0 1 K
0 10 Q
0 X
(440) 45 31.63 T
1 (Appendix B: File Formats) 180 31.63 S
4 F
(set part "A") 202.75 668.66 T
(   stockBounds) 202.75 656.66 T
(      softLB single \05010.0\051) 202.75 644.66 T
(      hardUB dense \05030.0 30.0 20.0 20.0\051) 202.75 632.66 T
(      endBounds) 202.75 620.66 T
(   supplyVol sparse \0500:42.0\051;) 202.75 608.66 T
(//) 238.75 596.66 T
(// Overrides the value, 17.0, given in) 238.75 584.66 T
(// example.supply.data.) 238.75 572.66 T
(set demand "A" "F") 202.75 548.66 T
(demandVol dense \05050.0 60.0 70.0 80.0\051) 220.75 536.66 T
(shipReward single \0501000.0\051) 220.75 524.66 T
(   cumShipReward single \05010.0\051;) 202.75 512.66 T
(set operation "A") 202.75 488.66 T
(   yieldRate single \0500.95\051;) 202.75 476.66 T
(set bomEntry "A" 1) 202.75 452.66 T
(   offset single \0501.0\051;) 202.75 440.66 T
(set subEntry "A" 1 0) 202.75 416.66 T
(   latestPeriod 2;) 202.75 404.66 T
(set bopEntry "A" 0) 202.75 380.66 T
(   productRate single \0502\051;) 202.75 368.66 T
FMENDPAGE
%%EndPage: "440" 12
%%Page: "441" 13
%%ViewingOrientation: 1 0 0 1
612 792 0 FMBEGINPAGE
0 FrameSetSepColors
FrameNoSep
-45 -45 657 837 C
0 0 0 1 0 0 0 1 K
0 10 Q
0 X
1 (Input Data File) 234 31.63 S
(441) 541.32 31.63 T
2 11 Q
(File \322e) 207 679.99 T
(xample.supply) 236.47 679.99 T
(.data\323:) 300.23 679.99 T
4 10 Q
(//------------------------------------------------------) 220.75 636.66 T
(// Example of a WIT Input Data File) 220.75 624.66 T
(// Supply File) 220.75 612.66 T
(//) 220.75 600.66 T
(// This file specifies supply data for the parts) 220.75 588.66 T
(// defined in "example.main.data".) 220.75 576.66 T
(//------------------------------------------------------) 220.75 564.66 T
(set part "A") 220.75 540.66 T
(supplyVol sparse \0500:17.0\051;) 238.75 528.66 T
(//) 256.75 516.66 T
(// Initial inventory = 17.0.) 256.75 504.66 T
(set part "B") 220.75 480.66 T
(supplyVol sparse \0501:100.0 3:50.0\051;) 238.75 468.66 T
(set part "C") 220.75 444.66 T
(supplyVol single \05034.0\051;) 238.75 432.66 T
(//) 256.75 420.66 T
(// Overrides the value, 30.0, given in) 256.75 408.66 T
(// example.main.data.) 256.75 396.66 T
(set part "E") 220.75 372.66 T
(supplyVol single \05025.0\051;) 238.75 360.66 T
FMENDPAGE
%%EndPage: "441" 13
%%Trailer
FMENDDOCUMENT
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 13
%%DocumentFonts: Helvetica-Bold
%%+ Symbol
%%+ Times-Roman
%%+ Times-Bold
%%+ Courier
%%+ Courier-Bold
%%+ Helvetica
%%DocumentNeedsFonts: Helvetica-Bold
%%+ Symbol
%%+ Times-Roman
%%+ Times-Bold
%%+ Courier
%%+ Courier-Bold
%%+ Helvetica
%%DocumentSuppliedFonts:
%%EOF
